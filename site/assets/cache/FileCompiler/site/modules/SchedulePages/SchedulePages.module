<?php

/**
 * ProcessWire Schedule Pages Module
 *
 * Copyright 2011 by Jasper Metselaar (jasper@formmailer.net)
 * Licensed under GNU/GPL v2, see http://processwire.com/about/license/
 *
 * This module allows makes it possible to schedule (un)publication of
 * pages. This version of the plugin module relies on the LazyCron
 * module by Ryan Cramer.
 *
 * Module is intended for:
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 *
 * Usage:
 * ======
 * 1. 	Place the SchedulePages.module file into the
 *		site/modules folder and install the plugin from the admin
 *		area.
 * 2.	Install the LazyCron module (if you haven't already). This
 *		module is part of the Processwire core, but it isn't
 *		activated by default.
 * 3.	Add the following date fields to your template:
 *		publish_from
 *		publish_until
 *		Note: the fields are already created during the
 *		installation of the module
 * 4.	That't all. LazyCron will run take care of (un)publishing
 *		your pages that have a the publish dates set. It will run
 *		every hour by default (you can choose interval from module
 *		options).
 *
 *		Please note: LazyCron hooks are only executed during
 *		pageviews that are delivered by ProcessWire. They are not
 *		executed when using ProcessWire's API from other scripts.
 */

class SchedulePages extends \ProcessWire\WireData implements \ProcessWire\Module, \ProcessWire\ConfigurableModule {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module'ss title, typically a little more descriptive than the class name
			'title' => 'Schedule Pages',

			// version: major, minor, revision, i.e. 100 = 1.0.0
			'version' => 122,

			// summary is brief description of what this module is
			'summary' => 'This module allows scheduling (un)publication of pages.',

			// Optional URL to more information about the module
			'href' => 'http://www.processwire.com/talk/topic/711-release-schedulepages/',

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks.
			'singular' => true,

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => true,
			// This module requires the LazyCron module.
			'requires' => "LazyCron"
			);
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
	 *
	 */
	// initialize the hook in your AutoLoad module
	public function init() {

		// Run this module on a interval using LazyCron
		if ($this->cronInterval) {
			$this->addHook("LazyCron::{$this->cronInterval}", $this, 'RunSchedulePages');
		} else {
			$this->addHook('LazyCron::everyHour', $this, 'RunSchedulePages');
		}

		// add a hook before the $pages->save, to check wheter the publish_from field needs to be cleared
		$this->pages->addHookBefore('save', $this, 'beforeSave');

		// add a hook after the $pages->save, to check wheter current page should be published or not
		$this->pages->addHookAfter('save', $this, 'afterSave');
	}

public function beforeSave($event) {
        $page = $event->arguments[0];

        // Clear the publish_from field automatically when the page is manually
        // unpublished. This prevents the page from being unintentionally
        // re-published on the next cron run.

        // prevent this hook being run two times
        if($page->schedulerSkip) return;

        // \ProcessWire\wire("log")->save("scheduler-debug", "status: $page->status"); // debug to see

        if (!$page->isNew() && $page->isChanged('status') && $page->is(\ProcessWire\Page::statusUnpublished) && $page->publish_from) {
            $this->session->error($this->_("“Publish From Date” field was cleared to prevent the page from being unintentionally re-published on the next Lazy Cron run."));
            $page->publish_from = null;
            $page->save('publish_from');
        }

        // set flag to prevent multiple runs
        $page->schedulerSkip = true;
    }


	public function afterSave($event) {
		$page = $event->arguments[0];

		$currenttime = time();

		// Fill the publish_from field automatically with the current timestamp
		// in case a page is published manually
		if ($this->autofillPublishFrom == "1" && !$page->is(\ProcessWire\Page::statusUnpublished) && !$page->publish_from && $page->template->hasField('publish_from')) {
			$page->publish_from = $currenttime ;
			$page->save('publish_from');
		}

		// If we are missing both publish-fields, then no need to go further
		if(!isset($page->publish_until) || !isset($page->publish_from)) return;

		// Check if publish_from and _until dates doesn't make any sense and disallow publishing if so
		if ($page->publish_from > $page->publish_until && $page->publish_from && $page->publish_until) {
			if ($page->is(\ProcessWire\Page::statusUnpublished)) return;
			$this->session->error($this->_("Your publish from setting is later than publish until. Please correct your dates. We play it save and don't allow publishing."));
			$page->setOutputFormatting(false);
			$page->addStatus(\ProcessWire\Page::statusUnpublished);
			$page->save();
			return;
		}

		// Check if publish_until is before current time, don't allow publishing on that situation
		if ($page->publish_until < $currenttime && $page->publish_until) {
			if ($page->is(\ProcessWire\Page::statusUnpublished)) return;
			$this->session->error($this->_("Page saved, but not published. Change publish until setting if you want to publish this now."));
			$page->setOutputFormatting(false);
			$page->addStatus(\ProcessWire\Page::statusUnpublished);
			$page->save();
			return;
		}

		// Check if publish_from is later than current time, don't allow publishing on that situation
		if ($page->publish_from > $currenttime) {
			if ($page->is(\ProcessWire\Page::statusUnpublished)) return;
			$this->session->error($this->_("Page saved, but not published. Change publish from setting if you want to publish this now."));
			$page->setOutputFormatting(false);
			$page->addStatus(\ProcessWire\Page::statusUnpublished);
			$page->save();
			return;
		}

	}


	/**
	 * Checks for pages that need to be published or unpublished.
	 *
	 */
	public function RunSchedulePages() {
		$currenttime = time(); // Get timestamp for current date

		// Select unpublished sites with a publish_from date < the current date and
		// add them to an array.
		$unpublished = \ProcessWire\wire("pages")->find("status=unpublished");
		foreach($unpublished as $p) {
			$p->setOutputFormatting(false); // Avoid date being formated.
			// Check if current time is greater than publish_from
			if ($p->publish_from<$currenttime) {
				// Publish pages with a publish_until date > current date (and publish_until is set)
				if ($p->publish_until > 0 && $p->publish_until <= $currenttime) {
					// We keep it unpublished, since publish until is set and valid
				} else if ($p->publish_from) {
					// If publish_from is defined, publish page
					$p->removeStatus(\ProcessWire\Page::statusUnpublished);
					$p->save();
					if ($this->debug == "1") {
						$p->setOutputFormatting(true);
						$this->message("Published $p->url with publish_from value of $p->publish_from and publish_until value of $p->publish_until. Current timestamp is " . date('Y-m-d H:i:s',$currenttime) .".", \ProcessWire\Notice::logOnly);
						$p->setOutputFormatting(false);
					}
				}
			}
		}

		// Select published sites with a publish_until date add them to an array.
		$published = \ProcessWire\wire("pages")->find("status<" . \ProcessWire\Page::statusUnpublished . ", publish_until>0");
		foreach($published as $p) {
			$p->setOutputFormatting(false); // Avoid date being formated.
			// Unpublish pages with a publish_until date <= current date
			if($p->publish_until <= $currenttime) {
				$p->addStatus(\ProcessWire\Page::statusUnpublished);
				$p->save();
				if ($this->debug == "1") {
					$p->setOutputFormatting(true);
					$this->message("Unpublished $p->url with publish_from value of $p->publish_from and publish_until value of $p->publish_until. Current timestamp is " . date('Y-m-d H:i:s',$currenttime) .".", \ProcessWire\Notice::logOnly);
					$p->setOutputFormatting(false);
					}
				}
		}
	}

	static public function getModuleConfigInputfields(array $data) {

		// this is a container for fields, basically like a fieldset
		$fields = new \ProcessWire\InputfieldWrapper();

		// since this is a static function, we can't use $this->modules, so get them from the global wire() function
		$modules = \ProcessWire\wire('modules');

		$field = $modules->get("InputfieldSelect");
		$field->name = "cronInterval";
		$field->label =  \ProcessWire\__("Cron interval");
		$field->description =  \ProcessWire\__("How often shall we check if any page needs to be (un)published.");
		if (isset($data['cronInterval'])) $field->value = $data['cronInterval'];
		$field->addOption('everyHour',  \ProcessWire\__('Every hour'));
		$field->addOption('everyMinute',  \ProcessWire\__('Every minute'));
		$field->addOption('every2Minutes',  \ProcessWire\__('Every 2 minutes'));
		$field->addOption('every5Minutes',  \ProcessWire\__('Every 5 minutes'));
		$field->addOption('every15Minutes',  \ProcessWire\__('Every 15 minutes'));
		$field->addOption('every30Minutes',  \ProcessWire\__('Every 30 minutes'));
		$field->addOption('every12Hours',  \ProcessWire\__('Every 12 hours'));
		$field->addOption('everyDay',  \ProcessWire\__('Every day'));
		$field->notes =  \ProcessWire\__("If you are not sure, choose Every hour.");

		$field2 = $modules->get("InputfieldSelect");
		$field2->name = "debug";
		$field2->label =  \ProcessWire\__("Debug");
		$field2->description =  \ProcessWire\__("Do you want to run this module in debug mode?");
		if (isset($data['debug'])) $field2->value = $data['debug'];
		$field2->addOption('0', \ProcessWire\__('No'));
		$field2->addOption('1', \ProcessWire\__('Yes'));
		$field2->notes =  \ProcessWire\__("If choose yes, all publish and unpublish events will be logged in the messages.txt file in /assets/logs/.");

		$field3 = $modules->get("InputfieldSelect");
		$field3->name = "autofillPublishFrom";
		$field3->label =  \ProcessWire\__("Always use “Publish From Date” field to store publishing timestamp");
		$field3->description =  \ProcessWire\__("Do you want to fill the “Publish From Date” field with the current timestamp in case a page is published manually?");
		if (isset($data['autofillPublishFrom'])) $field3->value = $data['autofillPublishFrom'];
		$field3->addOption('0', \ProcessWire\__('No'));
		$field3->addOption('1', \ProcessWire\__('Yes'));
		$field3->notes =  \ProcessWire\__("This way the “Publish From Date” field always contains a page’s publishing date – even if there was no scheduling via the “Publish From Date” field.");

		$fields->add($field);
		$fields->add($field3);
		$fields->add($field2);

		return $fields;
	}

	public function ___install() {
	// Add the required fields for this module
		$field = new \ProcessWire\Field();
		$field->type = $this->modules->get("FieldtypeDatetime");
		$field->name = 'publish_from';
		$field->label =  \ProcessWire\__('Publish From Date');
		$field->dateOutputFormat = \ProcessWire\wire('config')->dateFormat;
		$field->dateInputFormat = \ProcessWire\wire('config')->dateFormat;
		$field->datepicker = 1; // if you want datepicker enabled
		$field->defaultToday = 0; // if you want dates to default to today
		$field->save();

		$field = new \ProcessWire\Field();
		$field->type = $this->modules->get("FieldtypeDatetime");
		$field->name = 'publish_until';
		$field->label =  \ProcessWire\__('Publish Until Date');
		$field->dateOutputFormat = \ProcessWire\wire('config')->dateFormat;
		$field->dateInputFormat = \ProcessWire\wire('config')->dateFormat;
		$field->datepicker = 1; // if you want datepicker enabled
		$field->defaultToday = 0; // if you want dates to default to today
		$field->save();
	}

	public function ___uninstall() {
	// Remove the module's fields
		$field = \ProcessWire\wire('fields')->get('publish_from');
		if($field && $field->numFieldgroups() > 0)
			throw new \ProcessWire\WireException("Can't uninstall because field publish_from is still being used. Please remove it from any templates.");
		\ProcessWire\wire('fields')->delete($field);
		$field = \ProcessWire\wire('fields')->get('publish_until');
		if($field && $field->numFieldgroups() > 0)
			throw new \ProcessWire\WireException("Can't uninstall because field publish_until is still being used. Please remove it from any templates.");
		\ProcessWire\wire('fields')->delete($field);
	}
}
