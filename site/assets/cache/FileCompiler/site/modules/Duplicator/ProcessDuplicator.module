<?php

 require_once(\ProcessWire\wire('files')->compile(\ProcessWire\wire("config")->paths->root . 'site/modules/Duplicator' . DIRECTORY_SEPARATOR . 'Classes/DupUtil.php',array('includes'=>true,'namespace'=>true,'modules'=>false,'skipIfNamespace'=>false)));

class ProcessDuplicator extends \ProcessWire\Process
{
	protected $dupmod = null;

	public static function getModuleInfo()
	{
		return array(
			'title' 	  => 'Duplicator - Packages Manager',
			'summary' 	  => 'Manage your backups/packages built with Duplicator inside ProcessWire.',
			'version' 	  => '1.1.7',
			'author' 	  => 'flydev',
			'icon' 		  => 'clone',
			'href' 		  => 'https://processwire.com/talk/topic/15345-duplicator-backup-and-move-sites/',
			'permission'  => 'duplicator',
			'permissions' => array(
				'duplicator' => 'Run the Duplicator module'
			),
			'page' 		  => array(
				'name' => 'duplicator',
				'parent' => 'setup',
				'title' => 'Duplicator'
			),
			'require' 	  => 'Duplicator',
			'autoload'    => function() {
				if(\ProcessWire\wire('page')->process == 'ProcessDuplicator') return true;
				else return false;
			}
		);
	}

	public function init()
	{
		parent::init();

		if ($this->permissions->get('duplicator')->id && !$this->user->hasPermission('duplicator'))
			throw new \ProcessWire\WirePermissionException(\ProcessWire\__('Duplicator: You have no permission to use this module.'));

		$this->dupmod = $this->modules->get(Duplicator::DUP_APPLICATION_NAME);
	}


	public function ___execute()
	{
		$out  = $this->renderHead();
		$out .= $this->renderLog();
		$out .= $this->dialogBoxModal('delete-confirm', \ProcessWire\__('Confirm'), 'alert', \ProcessWire\__('All packages listed here will be permanently deleted and cannot be recovered. Are you sure ?'));
		$out .= $this->dialogBoxModal('delete-confirm-single', \ProcessWire\__('Confirm'), 'alert', \ProcessWire\__('This package will be permanently deleted and cannot be recovered. Are you sure ?'));
		$out .= $this->dialogBoxModal('job-running', \ProcessWire\__('Info'), 'info', \ProcessWire\__('A job is already running. Please wait until it finish.'));

		$action = \ProcessWire\wire('sanitizer')->text(\ProcessWire\wire('input')->get->action);
		switch ($action) {
			case 'packages':
				$out .= $this->renderGetPackages();

				if(isset(\ProcessWire\wire('input')->get->service) && isset(\ProcessWire\wire('input')->get->file)) {
					switch (\ProcessWire\wire('sanitizer')->text(\ProcessWire\wire('input')->get->service)) {
						case 'googledrive':
							$google = new GoogleDriveClient();
							$google->setTempFolder(Duplicator::DUP_TEMP_FOLDER);
							$google->setAppName(Duplicator::DUP_APPLICATION_NAME);
							$google->setGoogleKeyFile($this->dupmod->googleKeyFile);
							$google->connect();
							$file = $google->getPackage(\ProcessWire\wire('sanitizer')->filename(\ProcessWire\wire('input')->get->file), Duplicator::DUP_PACKAGE_MIME_TYPE, 0);
							$google->download($file, \ProcessWire\wire('config')->paths->assets . Duplicator::DUP_DEFAULT_LOCAL_FOLDER . DS . $file[0]['name']);
							break;

						case 'amazon':
							$amazonaws = new \AmazonS3Client();
							$amazonaws->setAccessKey($this->dupmod->awsAccessKey);
							$amazonaws->setSecretKey($this->dupmod->awsSecretKey);
							$amazonaws->setRegion($this->dupmod->awsRegion);
							$amazonaws->setBucket($this->dupmod->awsBucketName);
							$amazonaws->download(\ProcessWire\wire('sanitizer')->filename(\ProcessWire\wire('input')->get->file), \ProcessWire\wire('config')->paths->assets . Duplicator::DUP_DEFAULT_LOCAL_FOLDER . DS . \ProcessWire\wire('sanitizer')->filename(\ProcessWire\wire('input')->get->file));
							break;

						default:
							break;
					}
				}
				elseif(isset(\ProcessWire\wire('input')->get->file)) {
					$filename = \ProcessWire\wire('sanitizer')->filename(\ProcessWire\wire('input')->get->file);
					$packages = DUP_Util::getPackages($this->dupmod->path, Duplicator::DUP_PACKAGE_EXTENSION);
					if(in_array($filename, $packages)) {
						\ProcessWire\wiresendfile($this->dupmod->path . DS . $filename);
					}
				} elseif(isset(\ProcessWire\wire('input')->get->installer)) {
					$filename = \ProcessWire\wire('sanitizer')->filename(\ProcessWire\wire('input')->get->installer);
					$this->getInstaller($filename);
				}
				\ProcessWire\wire('session')->redirect(\ProcessWire\wire('page')->url);
				break;

			case 'delete':
				$out .= $this->renderGetPackages();
				if(isset(\ProcessWire\wire('input')->get->service) && isset(\ProcessWire\wire('input')->get->file)) {
					switch (\ProcessWire\wire('sanitizer')->text(\ProcessWire\wire('input')->get->service)) {
						case 'googledrive':
							$google = new GoogleDriveClient();
							$google->setTempFolder(Duplicator::DUP_TEMP_FOLDER);
							$google->setAppName(Duplicator::DUP_APPLICATION_NAME);
							$google->setGoogleKeyFile($this->dupmod->googleKeyFile);
							$google->connect();
							$google->deleteFile(\ProcessWire\wire('sanitizer')->filename(\ProcessWire\wire('input')->get->file));
							break;

						case 'amazon':
							$amazonaws = new \AmazonS3Client();
							$amazonaws->setAccessKey($this->dupmod->awsAccessKey);
							$amazonaws->setSecretKey($this->dupmod->awsSecretKey);
							$amazonaws->setRegion($this->dupmod->awsRegion);
							$amazonaws->setBucket($this->dupmod->awsBucketName);
							$amazonaws->deleteFile(array(array('Key' => \ProcessWire\wire('sanitizer')->filename(\ProcessWire\wire('input')->get->file))));
							break;

						default:
							break;
					}
				} elseif(isset(\ProcessWire\wire('input')->get->file)) {
					$filename = \ProcessWire\wire('sanitizer')->filename(\ProcessWire\wire('input')->get->file);
					DUP_Util::deleteFile($this->dupmod->path . DS . $filename);
				}
				\ProcessWire\wire('session')->redirect(\ProcessWire\wire('page')->url);
				break;

			case 'deleteAll':
				DUP_Util::clean(Duplicator::getPath(), 0);

				$out .= $this->renderGetPackages();
				break;

			default:
				$out .= $this->renderGetPackages();
				break;
		}


		return $out;
	}

	/**
	 * @param $filename
	 */
	protected function generateInstaller($filename) {
		/**
		 * TODO: {}
		 * currently the installer is "universal"
		 */
	}

	/**
	 * @param $filename
	 */
	protected function getInstaller($filename) {
		//$packages = DUP_Util::getPackages(\ProcessWire\wire('config')->paths->assets . Duplicator::DUP_DEFAULT_LOCAL_FOLDER, Duplicator::DUP_PACKAGE_EXTENSION);
		//if(in_array($filename, $packages)) {
		\ProcessWire\wiresendfile(\ProcessWire\wire('config')->paths->siteModules . Duplicator::DUP_APPLICATION_NAME . DS . 'Deploy' . DS .'installer.php');
		//}
	}

	/**
	 * @return string
	 */
	protected function renderHead() {
		$out = "<div id='head'>";
		$out .= "	<img id='duplogo' src='{$this->config->urls->siteModules}{$this->dupmod->className}/Assets/Duplicator-logo-v2.png'>";
		$out .= "	<h2> Package Manager</h2>";
		$out .= "	<ul>";
		if(\ProcessWire\wire('user')->hasRole('superuser')) {
			$out .= "	<li><a href='" . $this->config->urls->admin . "module/edit?name=" . Duplicator::DUP_APPLICATION_NAME . "&collapse_info=1'><i class='fa fa-cog'></i> Settings</a></li>";
		}
		$out .=		"	<li><a href='https://processwire.com/talk/topic/15345-duplicator-backup-and-move-sites/' target='_blank'><i class='fa fa-comments'></i> Support</a></li>";
		$out .=	"	</ul>";
		$out .= "</div>";

		return $out;
	}

	/**
	 * @return string
	 */
	protected function renderLog()
	{
		$out = '';

		$fields = new \ProcessWire\InputfieldWrapper();



		$field = $this->modules->get('InputfieldTextarea');
		$field->label = \ProcessWire\__("Duplicator Log");
		$field->icon = 'history';
		$field->collapsed = \ProcessWire\Inputfield::collapsedYes;
		$field->attr('id', 'InputfieldLoglines');
		$loglines = '';
		$key   = $this->dupmod->lastPackageName;
		$datelog = basename($key, Duplicator::DUP_PACKAGE_EXTENSION);
		$parts = explode('-', $datelog);
		array_pop($parts);
		$datelog = implode('-', $parts);
		$ts = date_create_from_format(Duplicator::DUP_TIMESTAMP_FORMAT, $datelog);
		if($ts) {
			$from = array('from' => $ts->getTimestamp());
			foreach (\ProcessWire\wire('log')->getEntries(Duplicator::DUP_LOG_FILENAME, $from) as $entry) {
				$loglines .= $entry['date'] . ':  ' . $entry['text'] . "\n";
			}
		} else {
			foreach (\ProcessWire\wire('log')->getEntries(Duplicator::DUP_LOG_FILENAME) as $entry) {
				$loglines .= $entry['date'] . ':  ' . $entry['text'] . "\n";
			}
		}
		$field->value = $loglines;

		$fields->append($field);

		$out .= $fields->render();

		return $out;
	}

	/**
	 * @return string
	 */
	protected function renderGetPackages()
	{
		$out = '';
		$out .= $this->renderFilters();

		$table = \ProcessWire\wire('modules')->get("MarkupAdminDataTable");
		$table->setID('packagesDataTable');
		$table->setSortable(true);
		$table->setResizable(false);
		$table->setEncodeEntities(false);
		$table->headerRow( array("Package Name", "Created", "Size", "Download/Sync", "") );
		$datas = $this->getPackagesDetails($this->dupmod->path, Duplicator::DUP_PACKAGE_EXTENSION);
		$numFiles = 0;
		if(count($datas)) {
			// sort the array by timestamps
			usort($datas, function($a, $b) {
				return $a['time'] < $b['time'];
			});
			// remove the column 'time' before its being rendered
			array_walk($datas, function (&$value) {
				unset($value['time']);
			});
			foreach ($datas as $data) {
				$table->row($data);
				$numFiles++;
			}
		}

		if(!$numFiles) $out .= "<h2>" . \ProcessWire\__('No package found.') . "</h2>";
		$out .= $table->render();

		$href = $this->config->urls->httpAdmin . 'setup/' . strtolower(Duplicator::DUP_APPLICATION_NAME);

		$f = $this->modules->get('InputfieldButton');
		$f->attr('id+name', 'newPackage');
		$f->value = \ProcessWire\__('Initiate Backup Process');
		$f->icon = 'clone';
		$f->attr('data-action', $href . '/?action=backup_now');
		$f->attr('target', '_SELF');
		//$f->addClass('head_button_clone');
		$out .= $f->render();

		$f = $this->modules->get('InputfieldButton');
		$f->attr('id+name', 'deletePackages');
		$f->value = \ProcessWire\__('Delete All');
		$f->icon = 'trash';
		$f->attr('data-action', $href . '/?action=deleteAll');
		$out .= $f->render();
		$out .= "<div id='out'></div>";

		return $out;
	}

	public function ___install()
	{
		parent::___install();
	}

	public function ___uninstall()
	{
		parent::___uninstall();
	}

	/**
	 * @param $path
	 * @param $extension
	 * @return array|null
	 */
	protected function getPackagesDetails($path, $extension)
	{
		$data = null;
		$rows = array();

		if (!empty($path) && is_readable($path) && $this->dupmod->useLocalFolder) {
			$files = glob($path . DS . "*." . Duplicator::DUP_PACKAGE_EXTENSION);
			if (count($files)) {
				foreach ($files as $file) {
					if ((strrpos($file, $extension) == false) || (strrpos($file, 'json'))) continue;
					$originalFilename = basename($file);
					$parts = explode('-', $originalFilename);
					array_pop($parts);
					$tsstr = implode('-', $parts);
					$ts = date_create_from_format(Duplicator::DUP_TIMESTAMP_FORMAT, $tsstr);
					$createdOn = ($ts === false) ? 'invalid timestamp' : \ProcessWire\wirerelativetimestr($ts->getTimestamp());

					$dataAction = $this->config->urls->httpAdmin . 'setup/' . strtolower(Duplicator::DUP_APPLICATION_NAME) . '/?action=none';
					$href1 = '<a href="?action=packages&installer=' . $originalFilename . '" class="btnlink" title="Download and run this php file to install the package."><i class="fa fa-bolt"></i> Installer</a>';
					$href2 = '<a href="?action=packages&file=' . $originalFilename . '" class="btnlink" title="Download and put it in the webroot alongside installer.php"><i class="fa fa-download"></i> Package</a>';
					$href3 = '<a href="?action=delete&file=' . $originalFilename . '" class="trashTrigger" data-action="' . $dataAction . '"><i class="fa fa-trash"></i></a>';

					$data = array(
						'time' => $ts->getTimestamp(),
						"<img src='{$this->config->urls->siteModules}{$this->dupmod->className}/Assets/localfolder-64.png'> <span class='package-name'>" . $originalFilename . "</span>",
						$createdOn,
						DUP_Util::human_filesize(filesize($path . DS . $originalFilename)),
						$href1 . ' ' . $href2 . ' ',
						$href3
					);
					array_push($rows, $data);
				}
			}
		}

		// GoogleDrive
		if($this->dupmod->useGoogleDrive == 1) {
			try {
				$google = new \GoogleDriveClient();
				$google->setTempFolder(Duplicator::DUP_TEMP_FOLDER);
				$google->setAppName(Duplicator::DUP_APPLICATION_NAME);
				$google->setGoogleKeyFile($this->dupmod->googleKeyFile);
				$google->connect();
				$files = $google->getFiles();
				DUP_Logs::log("GoogleDrive: found " . count($files) . " packages");
				if(count($files)) {
					foreach ($files as $file) {
						if (strrpos($file['name'], $extension) == false) continue;
						$originalFilename = $file['name'];
						$parts = explode('-', $file['name']);
						array_pop($parts);
						$tsstr = implode('-', $parts);
						$ts = date_create_from_format(Duplicator::DUP_TIMESTAMP_FORMAT, $tsstr);
						$createdOn = ($ts === false) ? 'invalid timestamp' : \ProcessWire\wirerelativetimestr($ts->getTimestamp());
						$dataAction = $this->config->urls->httpRoot . str_replace('/', '', $this->config->urls->admin) . '/setup/' . strtolower(Duplicator::DUP_APPLICATION_NAME) . '/?action=none';
						$href1 = '<a href="?action=packages&installer='. $originalFilename .'" class="btnlink"><i class="fa fa-bolt"></i> Installer</a>';
						$href2 = '<a href="?action=packages&file='. $originalFilename .'&service=googledrive" class="btnlink" title="Synchronize the package from the Cloud to your Server."><i class="fa fa-cloud-download"></i> Sync</a>';
						$href3 = '<a href="?action=delete&file='. $file['id'] .'&service=googledrive" class="trashTrigger" data-action="' . $dataAction . '"><i class="fa fa-trash"></i></a>';

						$data = array(
							'time' => $ts->getTimestamp(),
							"<img src='{$this->config->urls->siteModules}{$this->dupmod->className}/Assets/google_drive-64.png'> <span class='package-name'>" . $originalFilename . "</span>",
							$createdOn,
							DUP_Util::human_filesize($file['size']),
							$href1 . ' ' . $href2 . ' ',
							$href3
						);
						array_push($rows, $data);
					}
				}
			} catch (\Exception $ex) {
				DUP_Logs::log("GoogleDrive error: " . $ex->getMessage(), 'error');
			}

		}

		// AmazonS3
		if($this->dupmod->useAmazonS3 == 1) {
			try {
				$amazonaws = new \AmazonS3Client();
				$amazonaws->setAccessKey($this->dupmod->awsAccessKey);
				$amazonaws->setSecretKey($this->dupmod->awsSecretKey);
				$amazonaws->setRegion($this->dupmod->awsRegion);
				$amazonaws->setBucket($this->dupmod->awsBucketName);
				$files = $amazonaws->getFiles();

				if(count($files)) {
					foreach ($files as $file) {
						if (strrpos($file['Key'], $extension) == false) continue;
						$originalFilename = $file['Key'];
						$parts = explode('-', $file['Key']);
						array_pop($parts);
						$tsstr = implode('-', $parts);
						$ts = date_create_from_format(Duplicator::DUP_TIMESTAMP_FORMAT, $tsstr);
						$createdOn = ($ts === false) ? 'invalid timestamp' : \ProcessWire\wirerelativetimestr($ts->getTimestamp());
						$dataAction = $this->config->urls->httpRoot . str_replace('/', '', $this->config->urls->admin) . '/setup/' . strtolower(Duplicator::DUP_APPLICATION_NAME) . '/?action=none';
						$href1 = '<a href="?action=packages&installer='. $originalFilename .'" class="btnlink"><i class="fa fa-bolt"></i> Installer</a>';
						$href2 = '<a href="?action=packages&file='. $originalFilename .'&service=amazon" class="btnlink" title="Synchronize the package from the Cloud to your Server."><i class="fa fa-cloud-download"></i> Sync</a>';
						$href3 = '<a href="?action=delete&file='. $file['Key'] . '&service=amazon" class="trashTrigger" data-action="' . $dataAction . '"><i class="fa fa-trash"></i></a>';

						$data = array(
							'time' => $ts->getTimestamp(),
							"<img src='{$this->config->urls->siteModules}{$this->dupmod->className}/Assets/amazon-64.png'> <span class='package-name'>" . $originalFilename . "</span>",
							$createdOn,
							DUP_Util::human_filesize($file['Size']),
							$href1 . ' ' . $href2 . ' ',
							$href3
						);
						array_push($rows, $data);
					}
				}
			} catch (\AmazonS3ClientException $ex) {
				DUP_Logs::log("AmazonS3 error: " . $ex->getMessage(), 'error');
			}

		}

		return array_reverse($rows);
	}


	/**
	 * @return string
	 */
	protected function renderFilters () {

		$out = "
			<div class='adminDataTableMenu'>
				<ul>
					<li><button id='btnSortByName' class='dsc'>". \ProcessWire\__("Sort by Name") . "</button></li>
				</ul>
			</div>
		";


		return $out;
	}

	/**
	 * @param $id
	 * @param $title
	 * @param $icon
	 * @param $body
	 * @return string
	 */
	protected function dialogBoxModal($id, $title, $icon, $body) {
		$out = "<div id='$id' class='modal-confirm' title='$title'>
				  <p><span class='ui-icon ui-icon-$icon' style='float:left; margin:12px 12px 20px 0;'></span>$body</p>
				</div>";

		return $out;
	}
}

